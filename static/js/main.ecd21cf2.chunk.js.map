{"version":3,"sources":["Components/Alert.js","Components/NavBar.js","Components/TextForm.js","App.js","index.js"],"names":["capatilize","word","lower","toLowerCase","charAt","toUpperCase","slice","Alert","props","alert","className","type","role","currentMessage","NavBar","mode","href","title","id","aboutText","onClick","toggleMode","htmlFor","defaultProps","darkMode","backgroundColor","color","TextForm","useState","text","setText","currentTheme","changeTheme","darkBtn","changeDarkBtn","style","heading","value","onChange","e","target","placeholder","height","setAlert","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","length","App","setMode","message","setMessage","setTimeout","body","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ecd21cf2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst capatilize = (word) => {\r\n  const lower = word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n};\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    props.alert && ( //Syntax for checking for null check\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capatilize(props.alert.type)}: </strong>\r\n        {props.alert.currentMessage}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"#\">\r\n                  {props.aboutText}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                {`${props.mode === \"light\" ? \"Enable\" : \"Disable\"}`} Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavBar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavBar.defaultProps = {\r\n  title: \"Enter title\",\r\n  aboutText: \"Enter About\",\r\n};\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\n\r\nlet darkMode = {\r\n  backgroundColor: \"white\",\r\n  color: \"black\",\r\n};\r\n\r\nexport const TextForm = (props) => {\r\n  const [text, setText] = useState(\"Enter the Text\");\r\n\r\n  const [currentTheme, changeTheme] = useState(darkMode);\r\n\r\n  const [darkBtn, changeDarkBtn] = useState(\"Enable Light Mode\");\r\n\r\n  const changeColor = () => {\r\n    if (currentTheme.backgroundColor === \"black\") {\r\n      changeTheme({\r\n        backgroundColor: \"white\",\r\n        color: \"black\",\r\n      });\r\n      changeDarkBtn(\"Enable Dark Mode\");\r\n    } else {\r\n      changeTheme({\r\n        backgroundColor: \"black\",\r\n        color: \"white\",\r\n      });\r\n      changeDarkBtn(\"Enable Light Mode\");\r\n    }\r\n  };\r\n\r\n  const handleUpperClick = () => {\r\n    setText(text.toUpperCase());\r\n    props.setAlert(\"Changed to Upper case\", \"success\");\r\n  };\r\n  const handleLowerClick = () => {\r\n    setText(text.toLowerCase());\r\n    props.setAlert(\"Changed to Lower case\", \"success\");\r\n  };\r\n  const handleCamelClick = () => {\r\n    setText(text.toUpperCase());\r\n    props.setAlert(\"Changed to Camel case\", \"success\");\r\n  };\r\n  const handleOnchange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const handleClearClick = () => {\r\n    setText(\"\");\r\n  };\r\n  const handleTextAreaClick = () => {\r\n    if (text === \"Enter the Text\" || text === \"Enter the Text\".toUpperCase())\r\n      setText(\"\");\r\n  };\r\n  const handleCopy = () => {\r\n    /* Get the text field */\r\n    var copyText = document.getElementById(\"myBox\");\r\n\r\n    /* Select the text field */\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n    /* Copy the text inside the text field */\r\n    navigator.clipboard.writeText(copyText.value);\r\n\r\n    /* Alert the copied text */\r\n    props.setAlert(\"Text copied!!\", \"success\");\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        style={\r\n          props.mode === \"dark\"\r\n            ? {\r\n                backgroundColor: \"black\",\r\n                color: \"white\",\r\n              }\r\n            : {\r\n                backgroundColor: \"white\",\r\n                color: \"black\",\r\n              }\r\n        }\r\n      >\r\n        <h1 className=\"text-center my-2\">{props.heading}</h1>\r\n        <div className=\"form-floating my-3\">\r\n          <textarea\r\n            value={text}\r\n            onClick={handleTextAreaClick}\r\n            onChange={handleOnchange}\r\n            className=\"form-control\"\r\n            placeholder=\"Leave a comment here\"\r\n            id=\"myBox\"\r\n            style={\r\n              props.mode === \"dark\"\r\n                ? {\r\n                    backgroundColor: \"black\",\r\n                    color: \"white\",\r\n                    height: \"100px\",\r\n                  }\r\n                : {\r\n                    backgroundColor: \"white\",\r\n                    color: \"black\",\r\n                    height: \"100px\",\r\n                  }\r\n            }\r\n          />\r\n          <label htmlFor=\"myBox\">Add Text</label>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleUpperClick}\r\n        >\r\n          Covert to UpperCase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleLowerClick}\r\n        >\r\n          Covert to LowerCase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleCamelClick}\r\n        >\r\n          Covert to CamelCase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          onClick={handleCopy}\r\n        >\r\n          Copy\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger mx-2 my-2\"\r\n          onClick={handleClearClick}\r\n        >\r\n          CLEAR\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger mx-2 my-2\"\r\n          onClick={() => {\r\n            props.toggleMode();\r\n            changeColor();\r\n          }}\r\n        >\r\n          {darkBtn}\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"my-2\"\r\n        style={\r\n          props.mode === \"dark\"\r\n            ? {\r\n                backgroundColor: \"black\",\r\n                color: \"white\",\r\n              }\r\n            : {\r\n                backgroundColor: \"white\",\r\n                color: \"black\",\r\n              }\r\n        }\r\n      >\r\n        <h4 className=\"text-center\">YOUR FINAL TEXT</h4>\r\n        <p>{text}</p>\r\n        <h4>\r\n          Your text has {text.split(\" \").length} words and {text.length}{\" \"}\r\n          characters\r\n        </h4>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport Alert from \"./Components/Alert\";\r\nimport NavBar from \"./Components/NavBar\";\r\nimport { TextForm } from \"./Components/TextForm\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const setAlert = (currentMessage, type) => {\r\n    setMessage({\r\n      currentMessage,\r\n      type,\r\n    });\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 2000);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    /* mode === \"light\" ? setMode(\"dark\")  : setMode(\"light\"); */\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"black\";\r\n      setAlert(\"Dark Mode has been Enabled\", \"success\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      setAlert(\"Light Mode has been Enabled\", \"success\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavBar\r\n        title=\"TextUtils\"\r\n        aboutText=\"About Us\"\r\n        mode={mode}\r\n        toggleMode={toggleMode}\r\n      />\r\n      <Alert alert={message} />\r\n      <div className=\"container\">\r\n        <TextForm\r\n          setAlert={setAlert}\r\n          heading=\"Enter Text to Anaylze\"\r\n          mode={mode}\r\n          toggleMode={toggleMode}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}